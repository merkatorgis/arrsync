#!/bin/bash

arrsync=$(basename "$0")
exec="npx $arrsync@latest"
base=$(dirname "$0")
[ "$(basename "$base")" = .bin ] && base=$base/../$arrsync
base=$(realpath "$base")

get_version() {
    (
        cd "$base" || exit
        npm pkg get version
    )
}

version=
version() {
    version=${version:-$(get_version)}
    echo "$arrsync version $version"
}

usage() {
    version
    export exec
    envsubst <"$base/usage"
    [ "$1" = 0 ] || exit 1
}

while getopts ":tHksch:u:p:r:w:" arg; do
    case $arg in
    t)
        # -t = trace; for debugging
        set -x
        ;;
    H | k | s | c)
        [ "$action" ] && usage
        action=$arg
        ;;
    h)
        host=$OPTARG
        ;;
    u)
        user=$OPTARG
        ;;
    p)
        port=$OPTARG
        ;;
    r)
        read=$OPTARG
        ;;
    w)
        write=$OPTARG
        ;;
    : | *)
        usage
        ;;
    esac
done

err() {
    echo "$*" >&2
}

notice() {
    err "Notice: $*"
}

warning() {
    err "Warning: $*"
}

error() {
    [ "$1" ] && err "Error: $*"
    exit 1
}

which rsync >/dev/null ||
    warning "command rsync not found; is it installed?"

host() {
    local default
    [ "$action" = Server ] && default=$HOSTNAME
    [ "$default" ] && local default_message=" (default is $default)"
    while ! [ "$host" ]; do
        read -rp \
            "• $arrsync Server host name?$default_message : " \
            host
        [ "$host" ] || host=$default
        [ "$action" = Client ] && host_sure
    done
}

user() {
    local default=$arrsync
    while ! [ "$user" ]; do
        read -rp \
            "• $arrsync Server user name? (default is $default) : " \
            user
        [ "$user" ] || user=$default
        [ "$action" = Server ] && user_sure
    done
}

root() {
    if [ "$(whoami)" != root ]; then
        err "Insufficient privileges; restart with sudo:"
        opts="-s"
        [ "$user" ] && opts+=" -u $user"
        [ "$host" ] && opts+=" -h $host"
        [ "$read" ] && opts+=" -r $read"
        [ "$write" ] && opts+=" -w $write"
        err "sudo $exec $opts"
        error
    fi
}

home() {
    # Since `su $user` is tricky from a script, we run everything as root, and
    # can't use ~ for the user's home directory.
    # https://superuser.com/a/484330/462952
    home=$(getent passwd "$user" | cut -d: -f6)
    [ -d "$home" ] ||
        error "can't find home directory for user $user"
}

# Configure Server
s() {
    which ssh-keygen >/dev/null ||
        error "command ssh-keygen not found; is the ssh client installed?"

    which sshd >/dev/null ||
        warning "command sshd not found; is the ssh server installed?"

    which rrsync >/dev/null ||
        warning "command rrsync not found; is it installed?"

    root

    host

    user_exists() {
        id -u "$user" >/dev/null 2>&1
    }

    user_sure() {
        user_exists || return
        read -rp \
            "  User $user already exists; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] || user=
    }

    user_sure
    user
    if ! user_exists; then
        which adduser >/dev/null ||
            error "command adduser not found"
        echo "  About to add the new user; you may press Enter to leave each user detail field"
        echo "  empty. Press any key to continue..."
        read -rsn 1
        adduser --disabled-password "$user" || exit
    fi

    read_default=127.0.0.1,127.0.0.2
    [ "$read" ] || read -rp \
        "• IP address to grant read access? (default is $read_default) : " \
        read
    [ "$read" ] || read=$read_default

    write_default=127.0.0.3,127.0.0.4
    [ "$write" ] || read -rp \
        "• IP address to grant write access? (default is $write_default) : " \
        write
    [ "$write" ] || write=$write_default

    home

    for mode in read write; do
        # Create the needed files and directories.
        mkdir -p "$home/$mode" "$home/.ssh"
        chmod 700 "$home/$mode" "$home/.ssh"
        ak=$home/.ssh/authorized_keys
        touch "$ak"
        chmod 600 "$ak"
        # Generate a new public/private key pair.
        echo
        echo "About to generate the $mode key pair. When asked for the passphrase (twice),"
        echo "just hit Enter, since we need to have no passphrase."
        echo "Press any key to continue..."
        read -rsn 1
        key=$home/.ssh/$host-$user-$mode
        ssh-keygen -o -a 100 -t ed25519 -f "$key" -C "$mode $user@$host" || exit
        # Have the files and directories owned by the $user.
        chown "$user:$user" "$home/$mode" "$home/.ssh" "$ak" "$key" "$key.pub"
        echo
        echo "To list the $mode private key contents (needed on Client configuration):"
        echo "  sudo cat '$key'"
        # Content of public key file.
        pub=$(cat "$key".pub)
        # First letter of $mode value.
        rw=${mode:0:1}
        # The value (a list of IPs) of the variable that is named as the value
        # of mode (read or write).
        from=${!mode}
        # Restrict connections authenticating with this key.
        echo "# Restricted ${mode}ing - $(version):" >>"$ak"
        echo "command=\"rrsync -${rw}o $home/$mode\",from=\"$from\",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-x11-forwarding $pub" >>"$ak"
    done
}

# Configure Client
c() {
    host_sure() {
        [ "$host" ] ||
            return
        which ssh-keyscan >/dev/null ||
            warning "command ssh-keyscan not found; is the ssh client installed?"
        ssh-keyscan "$host" -p "$port" >/dev/null 2>&1 &&
            return
        read -rp \
            "  SSH not answering at $host:$port; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] ||
            host=
    }
    port=${port:-22}
    host

    user

    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    temp_config=$(mktemp)

    for mode in read write; do
        # SSH config Host value.
        Host=$host-$user-$mode
        # SSH config IdentityFile value (the private key file).
        IdentityFile=~/.ssh/$Host
        # Configure a mode-specific Host entry.
        {
            echo
            echo "# $(version)"
            echo "Host $Host"
            echo "    IdentityFile $IdentityFile"
        } >>"$temp_config"

        # Collect the key file content (in a temporary file, to prevent having
        # to empty an existing key file before writing new lines to it, ending
        # up with an empty file when the user would press Ctrl-C, instead of
        # preserving the original content).
        temp_key=$(mktemp)
        echo "• Paste the contents (from the server) of the _private_ key file"
        echo -n "  $Host : "
        while true; do
            read -rs
            [ "$REPLY" ] || break
            echo "$REPLY" >>"$temp_key"
        done
        echo
        # Write the collected key content, if any.
        [ -s "$temp_key" ] &&
            cat "$temp_key" >"$IdentityFile"
        rm "$temp_key"
        # If nothing was written, a possible earlier key remains.
        [ -s "$IdentityFile" ] &&
            case $mode in
            read)
                echo "  Download files with e.g. rsync -avz $Host: ."
                ;;
            write)
                echo "  Upload files with e.g. rsync -avz . $Host:"
                ;;
            esac
        # Create the key file even if we didn't get the key content; user may
        # later add it manually.
        touch "$IdentityFile"
        chmod 600 "$IdentityFile"
    done

    # Write the SSH config.
    config=~/.ssh/config
    [ -s "$config" ] || empty=true
    {
        # Configure a general wildcard Host entry with common settings.
        [ "$empty" ] || echo
        echo "# $(version)"
        echo "Host $host-$user-*"
        echo "    User $user"
        echo "    HostName $host"
        echo "    Port $port"
        echo "    PreferredAuthentications publickey"
        echo "    PasswordAuthentication no"
        # Write the collected mode-specific Host entries.
        cat "$temp_config"
    } >>"$config"
    rm "$temp_config"
    chmod 600 "$config"
}

# List private key contents
k() {
    root
    user
    home
    host
    for mode in read write; do
        echo
        echo "$mode":
        key=$home/.ssh/$host-$user-$mode
        cat "$key"
    done
}

# Help
H() {
    usage 0 | more
}

[ "$action" = H ] || version
PS3="Select an action (type the number) : "
[ "$action" ] || select action in \
    'Configure Server' \
    'Configure Client' \
    'List private key contents' \
    'Help' \
    'Quit'; do
    case $REPLY in
    1)
        action=s
        ;;
    2)
        action=c
        ;;
    3)
        action=k
        ;;
    4)
        action=H
        ;;
    5)
        exit 0
        ;;
    *)
        action=
        ;;
    esac
    [ "$action" ] && break
done

# Run the function named as the selected action value.
$action
