#!/bin/bash

arrsync=$(basename "$0")
exec="npm exec --yes $arrsync@latest"

error() {
    echo "$1" >&2
    exit 1
}

usage() {
    echo "Usage:" >&2
    echo "Server: sudo $exec [-s] [-u USER] [-h HOST] [-r READ] [-w WRITE]" >&2
    error "Client: $exec [-c] [-u USER] [-h HOST] [-p PORT]"
}

while getopts ":scu:h:p:r:w:" arg; do
    case $arg in
    s)
        [ "$mode" ] && usage
        mode=s
        ;;
    c)
        [ "$mode" ] && usage
        mode=c
        ;;
    u)
        user=$OPTARG
        ;;
    h)
        host=$OPTARG
        ;;
    p)
        port=$OPTARG
        ;;
    r)
        read=$OPTARG
        ;;
    w)
        write=$OPTARG
        ;;
    : | *)
        usage
        ;;
    esac
done

asked=
while ! {
    [ "$mode" = s ] || [ "$mode" = c ]
}; do
    [ "$asked" ] && echo "Enter s for server, or c for client." >&2
    read -rp \
        "Configure this node as a server, or as a client? [sc] : " \
        mode
    # To lowercase.
    mode=${mode,,}
    asked=true
done

user() {
    local default=$arrsync
    while ! [ "$user" ]; do
        read -rp \
            "• $arrsync user name? (default is $default) : " \
            user
        [ "$user" ] || user=$default
        [ "$mode" = s ] && user_sure
    done
}

host() {
    local default
    [ "$mode" = s ] && default=$HOSTNAME
    [ "$default" ] && local default_message=" (default is $default)"
    while ! [ "$host" ]; do
        read -rp \
            "• $arrsync host name?$default_message : " \
            host
        [ "$host" ] || host=$default
        [ "$mode" = c ] && host_sure
    done
}

# Configure server.
if [ "$mode" = s ]; then
    which ssh-keygen >/dev/null ||
        error "Error: command ssh-keygen not found; is the ssh client installed?"

    if [ "$(whoami)" != root ]; then
        echo "Insufficient privileges; restart with:" >&2
        opts="-s"
        [ "$user" ] && opts+=" -u $user"
        [ "$host" ] && opts+=" -h $host"
        [ "$read" ] && opts+=" -r $read"
        [ "$write" ] && opts+=" -w $write"
        error "sudo $exec $opts"
    fi

    user_exists() {
        id -u "$user" >/dev/null 2>&1
    }

    user_sure() {
        user_exists || return
        read -rp \
            "User $user already exists; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] || user=
    }

    user_sure
    user
    if ! user_exists; then
        which adduser >/dev/null ||
            error "Error: command adduser not found"
        echo "About to add the new user; you may press Enter to leave each user detail field"
        echo "empty. Press any key to continue..."
        read -rn 1
        adduser --disabled-password "$user" || exit
    fi

    host

    read_default=127.0.0.1,127.0.0.2
    [ "$read" ] || read -rp \
        "• IP address to grant read access? (default is $read_default) : " \
        read
    [ "$read" ] || read=$read_default

    write_default=127.0.0.3,127.0.0.4
    [ "$write" ] || read -rp \
        "• IP address to grant write access? (default is $write_default) : " \
        write
    [ "$write" ] || write=$write_default

    # Since `su $user` is tricky from a script, we continue as root, and can't
    # use ~ for the user's home directory. https://superuser.com/a/484330/462952
    home=$(getent passwd "$user" | cut -d: -f6)
    [ -d "$home" ] ||
        error "Error: can't find home directory for user $user"

    for mode in read write; do
        # Create the needed files and directories.
        mkdir -p "$home/$mode" "$home/.ssh"
        chmod 700 "$home/$mode" "$home/.ssh"
        ak=$home/.ssh/authorized_keys
        touch "$ak"
        chmod 600 "$ak"
        # Generate a new public/private key pair.
        echo "About to generate the $mode key pair. When asked for the passphrase (twice),"
        echo "just hit Enter, since we need to have no passphrase."
        echo "Press any key to continue..."
        read -rn 1
        key=$home/.ssh/$host-$user-$mode
        ssh-keygen -o -a 100 -t ed25519 -f "$key" -C "$mode $user@$host" || exit
        # Have the files and directories owned by the $user.
        chown "$user:$user" "$home/$mode" "$home/.ssh" "$ak" "$key" "$key.pub"
        # Content of public key file.
        pub=$(cat "$key".pub)
        # First letter of $mode value.
        rw=${mode:0:1}
        # The value (a list of IPs) of the variable that is named as the value
        # of mode (read or write).
        from=${!mode}
        # Restrict connections authenticating with this key.
        echo "# Restricted ${mode}ing:" >>"$ak"
        echo "command=\"rrsync -${rw}o $home/$mode\",from=\"$from\",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-x11-forwarding $pub" >>"$ak"
    done

fi

# Configure client.
if [ "$mode" = c ]; then
    user

    host_sure() {
        [ "$host" ] ||
            return
        which ssh-keyscan >/dev/null ||
            echo "Warning: command ssh-keyscan not found; is the ssh client installed?" >&2
        ssh-keyscan "$host" -p "$port" >/dev/null 2>&1 &&
            return
        read -rp \
            "SSH not answering at $host:$port; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] ||
            host=
    }
    port=${port:-22}
    host
fi
