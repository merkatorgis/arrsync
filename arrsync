#!/bin/bash

arrsync=$(basename "$0")
exec="npm exec --yes $arrsync@latest"

error() {
    echo "$1" >&2
    exit 1
}

usage() {
    echo "Usage:" >&2
    echo "Server: sudo $exec [-s] [-u USER] [-h HOST] [-r READ] [-w WRITE]" >&2
    error "Client: $exec [-c] [-u USER] [-h HOST] [-p PORT]"
}

while getopts ":scu:h:p:r:w:" arg; do
    case $arg in
    s)
        [ "$role" ] && usage
        role=Server
        ;;
    c)
        [ "$role" ] && usage
        role=Client
        ;;
    u)
        user=$OPTARG
        ;;
    h)
        host=$OPTARG
        ;;
    p)
        port=$OPTARG
        ;;
    r)
        read=$OPTARG
        ;;
    w)
        write=$OPTARG
        ;;
    : | *)
        usage
        ;;
    esac
done

which rsync >/dev/null ||
    echo "Warning: command rsync not found; is it installed?" >&2

user() {
    local default=$arrsync
    while ! [ "$user" ]; do
        read -rp \
            "• $arrsync user name? (default is $default) : " \
            user
        [ "$user" ] || user=$default
        [ "$role" = Server ] && user_sure
    done
}

host() {
    local default
    [ "$role" = Server ] && default=$HOSTNAME
    [ "$default" ] && local default_message=" (default is $default)"
    while ! [ "$host" ]; do
        read -rp \
            "• $arrsync host name?$default_message : " \
            host
        [ "$host" ] || host=$default
        [ "$role" = Client ] && host_sure
    done
}

Server() {
    which rrsync >/dev/null ||
        echo "Warning: command rrsync not found; is it installed?" >&2

    which ssh-keygen >/dev/null ||
        error "Error: command ssh-keygen not found; is the ssh client installed?"

    if [ "$(whoami)" != root ]; then
        echo "Insufficient privileges; restart with sudo:" >&2
        opts="-s"
        [ "$user" ] && opts+=" -u $user"
        [ "$host" ] && opts+=" -h $host"
        [ "$read" ] && opts+=" -r $read"
        [ "$write" ] && opts+=" -w $write"
        error "sudo $exec $opts"
    fi

    user_exists() {
        id -u "$user" >/dev/null 2>&1
    }

    user_sure() {
        user_exists || return
        read -rp \
            "User $user already exists; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] || user=
    }

    user_sure
    user
    if ! user_exists; then
        which adduser >/dev/null ||
            error "Error: command adduser not found"
        echo "About to add the new user; you may press Enter to leave each user detail field"
        echo "empty. Press any key to continue..."
        read -rsn 1
        adduser --disabled-password "$user" || exit
    fi

    host

    read_default=127.0.0.1,127.0.0.2
    [ "$read" ] || read -rp \
        "• IP address to grant read access? (default is $read_default) : " \
        read
    [ "$read" ] || read=$read_default

    write_default=127.0.0.3,127.0.0.4
    [ "$write" ] || read -rp \
        "• IP address to grant write access? (default is $write_default) : " \
        write
    [ "$write" ] || write=$write_default

    # Since `su $user` is tricky from a script, we continue as root, and can't
    # use ~ for the user's home directory. https://superuser.com/a/484330/462952
    home=$(getent passwd "$user" | cut -d: -f6)
    [ -d "$home" ] ||
        error "Error: can't find home directory for user $user"

    for mode in read write; do
        # Create the needed files and directories.
        mkdir -p "$home/$mode" "$home/.ssh"
        chmod 700 "$home/$mode" "$home/.ssh"
        ak=$home/.ssh/authorized_keys
        touch "$ak"
        chmod 600 "$ak"
        # Generate a new public/private key pair.
        echo "About to generate the $mode key pair. When asked for the passphrase (twice),"
        echo "just hit Enter, since we need to have no passphrase."
        echo "Press any key to continue..."
        read -rsn 1
        key=$home/.ssh/$host-$user-$mode
        ssh-keygen -o -a 100 -t ed25519 -f "$key" -C "$mode $user@$host" || exit
        # Have the files and directories owned by the $user.
        chown "$user:$user" "$home/$mode" "$home/.ssh" "$ak" "$key" "$key.pub"
        # Content of public key file.
        pub=$(cat "$key".pub)
        # First letter of $mode value.
        rw=${mode:0:1}
        # The value (a list of IPs) of the variable that is named as the value
        # of mode (read or write).
        from=${!mode}
        # Restrict connections authenticating with this key.
        echo "# Restricted ${mode}ing:" >>"$ak"
        echo "command=\"rrsync -${rw}o $home/$mode\",from=\"$from\",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-x11-forwarding $pub" >>"$ak"
    done
}

Client() {
    user

    host_sure() {
        [ "$host" ] ||
            return
        which ssh-keyscan >/dev/null ||
            echo "Warning: command ssh-keyscan not found; is the ssh client installed?" >&2
        ssh-keyscan "$host" -p "$port" >/dev/null 2>&1 &&
            return
        read -rp \
            "SSH not answering at $host:$port; continue anyway? [yN] : " \
            sure
        [ "${sure,,}" = y ] ||
            host=
    }
    port=${port:-22}
    host

    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    temp_config=$(mktemp)

    for mode in read write; do
        # SSH config Host value.
        Host=$host-$user-$mode
        # SSH config IdentityFile value (the private key file).
        IdentityFile=~/.ssh/$Host
        # Configure a mode-specific Host entry.
        {
            echo
            echo "Host $Host"
            echo "    IdentityFile $IdentityFile"
        } >>"$temp_config"

        # Collect the key file content (in a temporary file, to prevent having
        # to empty an existing key file before writing new lines to it, ending
        # up with an empty file when the user would press Ctrl-C, instead of
        # preserving the original content).
        temp_key=$(mktemp)
        echo "• Paste the contents (from the server) of the _private_ key file"
        echo -n "  $Host : "
        while true; do
            read -rs
            [ "$REPLY" ] || break
            echo "$REPLY" >>"$temp_key"
        done
        echo
        # Write the collected key content (if any).
        [ -s "$temp_key" ] && cat "$temp_key" >"$IdentityFile"
        rm "$temp_key"
        touch "$IdentityFile"
        chmod 600 "$IdentityFile"
        [ -s "$IdentityFile" ] ||
            echo "Notice: private key file $IdentityFile is empty." >&2
    done

    # Write the SSH config.
    config=~/.ssh/config
    [ -s "$config" ] || empty=true
    {
        # Configure a general wildcard Host entry with common settings.
        [ "$empty" ] || echo
        echo "Host $host-$user-*"
        echo "    User $user"
        echo "    HostName $host"
        echo "    Port $port"
        # Write the collected mode-specific Host entries.
        cat "$temp_config"
    } >>"$config"
    rm "$temp_config"
    chmod 600 "$config"
}

PS3="Select this node's role (type the number) : "
[ "$role" ] || select role in Server Client; do
    [ "$role" ] && break
done

# Run the s or the c function.
$role
